/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#include "main.h"

int main(void)
{
	//RCC engine AHB1 peripheral clock enable register address
//	uint32_t *pClkCtrlReg = (uint32_t *)(0x40023800U + 0x30); //offset for AHB1ENR
//	uint32_t *pGpioAModereg = (uint32_t*)(0x40020000U + 0x00); //gpioa mode reg
//	uint32_t *pGpioAOutreg = (uint32_t*)(0x40020000U + 0x14); //gpioa output data reg

	RCC_AHB1ENR_t volatile *const pClkCtrlReg = (RCC_AHB1ENR_t*)(0x40023800U + 0x30);
	GPIOx_MODER_t volatile *const pGpioAModeReg = (GPIOx_MODER_t*)(0x40020000U + 0x00);
	GPIOx_ODR_t   volatile *const pGPIOAOutReg = (GPIOx_ODR_t*)(0x40020000U + 0x14);
	/*enable clock for GPIOA peripheral*/
//	uint32_t temp = *pClkCtrlReg; //read
//	temp = temp | 0x01; //set the 0th bit in RCC AHB1ENR for GPIOA(modify operation)
//	*pClkCtrlReg = temp; //write back

	//short from for above three commented statements
//	*pClkCtrlReg |= 0x01; //difficult method
	pClkCtrlReg->gpioa_en;

	/*configure the mode of gpioa to output*/
	//1. clear bit 10 and 11 first
//	*pGpioAModereg &= 0xfffff3ff;
	*pGpioAModereg &= (~(3 << 10));
	//2. make bit 10 set
//	*pGpioAModereg |= 0x00000400;
	*pGpioAModereg |= (1 << 10);

	while(1) { //led will toggle infinitely
		/*set bit 5 in output data register in GPIOA*/
	//	*pGpioAOutreg |= 0x0020;
		*pGpioAOutreg |= (1 << 5);

		/*some delay*/
		for(uint32_t i = 0; i < 300000; i++);

		/*cleat the 5th bit in gpioa output data register to turn off led*/
		*pGpioAOutreg &= ~(1 << 5);

		/*some delay*/
		for(uint32_t i = 0; i < 300000; i++);
	}

    /* Loop forever */
	for(;;);
}
